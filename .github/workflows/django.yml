name: onrecord CI/CD
on:
  push:
    branches: ["main"]
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
      NAVER_SECRET: ${{ secrets.NAVER_SECRET }}
      NAVER_REDIRECT_URI: ${{ secrets.NAVER_REDIRECT_URI }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_SECRET: ${{ secrets.KAKAO_SECRET }}
      KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Check and copy settings.py
        run: |
          if [ ! -d "config" ]; then
            mkdir -p config
          fi
          if [ -f ".github/workflows/settings.py" ]; then
            cp .github/workflows/settings.py config/settings.py
            echo "Successfully copied settings.py"
          else
            echo "Error: settings.py not found in .github/workflows/"
            exit 1
          fi
      
      - name: Run tests
        run: python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
      NAVER_SECRET: ${{ secrets.NAVER_SECRET }}
      NAVER_REDIRECT_URI: ${{ secrets.NAVER_REDIRECT_URI }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_SECRET: ${{ secrets.KAKAO_SECRET }}
      KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up SSH
        run: |
          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -o StrictHostKeyChecking=no -i deploy_key $SERVER_USER@$SERVER_HOST << 'EOF'
            set -e
            echo "배포 start❗"
            cd /root/On-Record
            git pull origin main
            echo "CI 완료❗"
            source venv/bin/activate
            pip install -r requirements.txt
            echo "패키지 업데이트 완료❗"
            python manage.py migrate
            echo "DB 마이그레이션 완료❗"
            rm -rf staticfiles/
            python manage.py collectstatic --noinput
            echo "정적 파일 생성 완료❗"
            sudo chmod -R 755 /root/On-Record/staticfiles/
            echo "정적 파일 권한 설정 완료❗"
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx
            echo "Gunicorn & Nginx 재시작 완료❗"
            echo "CD 완료❗"
          EOF
